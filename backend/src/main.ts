import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import * as express from 'express';
import * as path from 'path';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  
  // Configuraci√≥n global de pipes
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true,
    transform: true,
    forbidNonWhitelisted: true,
  }));

  // Configuraci√≥n de CORS
  app.enableCors({
    origin: process.env.FRONTEND_URL || 'http://localhost:5173',
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
  });

  // Prefijo global para la API
  app.setGlobalPrefix('api');

  // Configuraci√≥n de Swagger
  const config = new DocumentBuilder()
    .setTitle('Sistema de Gesti√≥n Legal API')
    .setDescription(`
      API completa para el sistema de gesti√≥n de despacho de abogados.
      
      ## Funcionalidades Principales:
      
      ### üîê Autenticaci√≥n y Usuarios
      - Registro e inicio de sesi√≥n de usuarios
      - Gesti√≥n de roles (ADMIN, ABOGADO, CLIENTE)
      - Recuperaci√≥n de contrase√±as
      
      ### üìã Gesti√≥n de Casos
      - Creaci√≥n y gesti√≥n de expedientes
      - Asignaci√≥n de casos a abogados
      - Seguimiento del estado de casos
      
      ### üìÖ Citas y Agendas
      - Programaci√≥n de citas entre abogados y clientes
      - Gesti√≥n de calendarios
      - Notificaciones de citas
      
      ### üìù Documentos
      - Subida y gesti√≥n de documentos
      - Organizaci√≥n por expedientes
      - Control de acceso por roles
      
      ### ‚úÖ Tareas y Seguimiento
      - Creaci√≥n y asignaci√≥n de tareas
      - Seguimiento de estado y prioridades
      - Notificaciones de tareas vencidas
      
      ### üí∞ Facturaci√≥n
      - Generaci√≥n de facturas electr√≥nicas
      - Gesti√≥n de provisiones de fondos
      - Firma digital de documentos
      
      ### üí¨ Chat y Comunicaci√≥n
      - Mensajer√≠a entre usuarios
      - Chat con IA para asistencia
      - Historial de conversaciones
      
      ### üìä Reportes y Analytics
      - Estad√≠sticas de casos y tareas
      - Reportes de productividad
      - M√©tricas de abogados
      
      ### ‚öôÔ∏è Administraci√≥n
      - Gesti√≥n de usuarios y permisos
      - Configuraci√≥n de par√°metros del sistema
      - Monitoreo y auditor√≠a
    `)
    .setVersion('1.0.0')
    .addTag('auth', 'Autenticaci√≥n y gesti√≥n de usuarios')
    .addTag('users', 'Gesti√≥n de usuarios y perfiles')
    .addTag('cases', 'Gesti√≥n de casos y expedientes')
    .addTag('appointments', 'Gesti√≥n de citas y agendas')
    .addTag('documents', 'Gesti√≥n de documentos')
    .addTag('tasks', 'Gesti√≥n de tareas y seguimiento')
    .addTag('invoices', 'Facturaci√≥n electr√≥nica')
    .addTag('provision-fondos', 'Gesti√≥n de provisiones de fondos')
    .addTag('chat', 'Chat y mensajer√≠a')
    .addTag('reports', 'Reportes y estad√≠sticas')
    .addTag('admin', 'Funciones administrativas')
    .addTag('parametros', 'Configuraci√≥n de par√°metros del sistema')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: 'Enter JWT token',
        in: 'header',
      },
      'JWT-auth',
    )
    .build();

  const document = SwaggerModule.createDocument(app, config);
  
  // Configurar Swagger UI con opciones personalizadas
  SwaggerModule.setup('api/docs', app, document, {
    swaggerOptions: {
      persistAuthorization: true,
      docExpansion: 'none',
      filter: true,
      showRequestDuration: true,
      syntaxHighlight: {
        activate: true,
        theme: 'monokai'
      },
      tryItOutEnabled: true,
    },
    customSiteTitle: 'Sistema de Gesti√≥n Legal - API Documentation',
    customCss: `
      .swagger-ui .topbar { display: none }
      .swagger-ui .info .title { color: #2c3e50; font-size: 2.5em; }
      .swagger-ui .info .description { font-size: 1.1em; line-height: 1.6; }
      .swagger-ui .scheme-container { background: #f8f9fa; padding: 10px; border-radius: 5px; }
      .swagger-ui .opblock.opblock-get .opblock-summary-method { background: #61affe; }
      .swagger-ui .opblock.opblock-post .opblock-summary-method { background: #49cc90; }
      .swagger-ui .opblock.opblock-put .opblock-summary-method { background: #fca130; }
      .swagger-ui .opblock.opblock-delete .opblock-summary-method { background: #f93e3e; }
      .swagger-ui .opblock.opblock-patch .opblock-summary-method { background: #50e3c2; }
    `,
  });

  // Servir archivos est√°ticos desde la carpeta uploads
  app.use('/uploads', express.static(path.join(__dirname, '..', 'uploads')));

  const port = process.env.PORT || 3000;
  await app.listen(port);
  console.log(`üöÄ Servidor corriendo en http://localhost:${port}`);
  console.log(`üìÅ Archivos est√°ticos disponibles en http://localhost:${port}/uploads`);
  console.log(`üìö Documentaci√≥n Swagger disponible en http://localhost:${port}/api/docs`);
}
bootstrap(); 